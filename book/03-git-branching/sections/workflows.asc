=== Rozgałęzione przepływy pracy

Teraz, gdy masz podstawy rozgałęziania i łączenia, co możesz lub powinieneś zrobić z nimi?
W tej sekcji omówimy niektóre typowe przepływy pracy, które umożliwiają takie rozgałęzienia, dzięki czemu możesz zdecydować, czy chcesz włączyć je do swojego własnego cyklu rozwoju.

==== Długo biegnące gałęzie

(((branches, long-running)))
Ponieważ Git używa prostego łączenia w trzech kierunkach, łączenie z jednej gałęzi w drugą wiele razy w długim okresie czasu jest na ogół łatwe.
Oznacza to, że możesz mieć kilka oddziałów, które są zawsze otwarte i używasz ich na różnych etapach swojego cyklu rozwoju; możesz regularnie łączyć niektóre z nich z innymi.

Wielu programistów Git ma przepływ pracy obejmujący to podejście, na przykład posiadający tylko kod, który jest całkowicie stabilny w gałęzi `master` - prawdopodobnie tylko kod, który został lub zostanie wydany.
Mają kolejną równoległą gałąź o nazwie `develop` lub` next`, z której pracują lub używają do testowania stabilności - niekoniecznie jest ona zawsze stabilna, ale gdy tylko osiągnie stabilny stan, może zostać scalona w `master`.
Służy do wciągania gałęzi tematycznych (gałęzi krótkotrwałych, takich jak twoja wcześniejsza gałąź `iss53`), kiedy są gotowe, aby upewnić się, że wszystkie testy są zaliczane i nie wprowadzają błędów.
W rzeczywistości mówimy o wskaźnikach przesuwających się do linii popełnianych błędów.
Stabilne gałęzie znajdują się dalej w linii w historii zatwierdzania, a gałęzie z krwawiącymi krawędziami są dalej w historii.

.A linear view of progressive-stability branching
image::images/lr-branches-1.png[A linear view of progressive-stability branching.]

Generalnie łatwiej jest myśleć o nich jako o silosach roboczych, gdzie zestawy zatwierdzeń kończą się na bardziej stabilny silos, gdy są w pełni przetestowane.

[[lrbranch_b]]
.A ``silo'' view of progressive-stability branching
image::images/lr-branches-2.png[A ``silo'' view of progressive-stability branching.]

Możesz to robić na kilku poziomach stabilności.
Niektóre większe projekty mają także gałąź `proposed` lub` pu` (proposed updates), która ma zintegrowane gałęzie, które mogą nie być gotowe do przejścia do gałęzi `next` lub` master`.
Na myśli, które twoje gałęzi są na różnych poziomach życia; kiedy osiągnąłeś bardziej stabilny poziom, przejścia scalone w odgałęzienie nad nimi.
Ponownie, posiadanie wielu długich gałęzi nie jest konieczne, ale często jest pomocne, szczególnie gdy mamy do czynienia z bardzo dużymi lub złożonymi projektami.

[[_topic_branch]]
==== Topic Branches

(((branches, topic)))
Oddziały tematyczne są jednak przydatne w projektach dowolnej wielkości.
Branża tematyczna to krótka gałąź, którą tworzysz i używasz dla pojedynczej funkcji lub związanej z nią pracy.
To jest coś, czego prawdopodobnie nigdy wcześniej nie robiłeś z VCS, ponieważ generalnie tworzenie i łączenie oddziałów jest zbyt kosztowne.

Ale w Git często się tworzą, pracuje, łączy i dzieli kilka razy dziennie.
Widziałeś to w ostatniej sekcji z utworzonymi przez ciebie gałęziami `iss53` i` hotfix`.
You did a few commits on them and deleZrobiłeś kilka commitów na nich i usunąłeś je bezpośrednio po połączeniu ich w główną gałąź. ted je bezpośrednio po połączeniu ich w główny oddział.
Ta technika pozwala szybko i całkowicie przełączać się między kontekstami - ponieważ twoja praca jest podzielona na silosy, w których wszystkie zmiany w tej gałęzi mają do czynienia z tym tematem, łatwiej jest zobaczyć, co się stało podczas sprawdzania kodu i takie.
Możesz przechowywać zmiany przez kilka minut, dni lub miesięcy i scalać je, gdy będą gotowe, niezależnie od kolejności, w jakiej zostały utworzone lub wykonane.

Zastanówmy się nad przykładem wykonania jakiejś pracy (na `master`), rozgałęzianiem dla problemu (` iss91`), pracujemy nad nim przez chwilę, rozgałęziamy drugą gałąź, aby wypróbować inny sposób obsługi tej samej rzeczy (`iss91v2` ), wracając do swojego głównego oddziału i pracując tam przez jakiś czas, a następnie rozgałęziając się tam, aby wykonać jakąś pracę, której nie jesteś pewien to dobry pomysł (gałąź "dumbidea").
Twoja historia zatwierdzeń będzie wyglądać mniej więcej tak:

.Multiple topic branches
image::images/topic-branches-1.png[Multiple topic branches.]

Teraz załóżmy, że decydujesz się na najlepsze rozwiązanie drugiego problemu (`iss91v2`); i pokazałeś oddział `dumbidea` swoim współpracownikom i okazuje się to być genialne.
Możesz wyrzucić oryginalną gałąź `iss91` (tracąc zatwierdzenia` C5` i `C6`) i połączyć się z pozostałymi dwoma.
Twoja historia wygląda wtedy tak:

.History after merging `dumbidea` and `iss91v2`
image::images/topic-branches-2.png[History after merging `dumbidea` and `iss91v2`.]

Bardziej szczegółowo zajmiemy się różnymi możliwymi przepływami pracy dla twojego projektu Git w << _ distributed_git >>, więc zanim zdecydujesz, który schemat rozgałęzień będzie wykorzystywał twój następny projekt, koniecznie przeczytaj ten rozdział.

Ważne jest, aby pamiętać, kiedy robisz to wszystko, że te gałęzie są całkowicie lokalne.
Kiedy rozgałęziacie się i łączycie, wszystko dzieje się tylko w repozytorium Git - nie ma komunikacji z serwerem.
